//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ToolingManWPF.ConditionServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MoldType", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.Data")]
    [System.SerializableAttribute()]
    public partial class MoldType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoldTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoldCateIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.Mold> MoldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MoldTypeID {
            get {
                return this.MoldTypeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldTypeIDField, value) != true)) {
                    this.MoldTypeIDField = value;
                    this.RaisePropertyChanged("MoldTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string MoldCateID {
            get {
                return this.MoldCateIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldCateIDField, value) != true)) {
                    this.MoldCateIDField = value;
                    this.RaisePropertyChanged("MoldCateID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.Mold> Mold {
            get {
                return this.MoldField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldField, value) != true)) {
                    this.MoldField = value;
                    this.RaisePropertyChanged("Mold");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Mold", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.Data")]
    [System.SerializableAttribute()]
    public partial class Mold : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoldNRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoldTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ToolingManWPF.ConditionServiceReference.MoldStateType StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CuttedtimesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> MaxCuttimesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CurrentCuttimesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> MaxLendHourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseCycleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastReleasedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> MaintainCycleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastMainedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProducerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> WeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.MoldLastRecord> MoldLastRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.Report> ReportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.UniqStorage> UniqStorageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MoldNR {
            get {
                return this.MoldNRField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldNRField, value) != true)) {
                    this.MoldNRField = value;
                    this.RaisePropertyChanged("MoldNR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MoldTypeID {
            get {
                return this.MoldTypeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldTypeIDField, value) != true)) {
                    this.MoldTypeIDField = value;
                    this.RaisePropertyChanged("MoldTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectID {
            get {
                return this.ProjectIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectIDField, value) != true)) {
                    this.ProjectIDField = value;
                    this.RaisePropertyChanged("ProjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public ToolingManWPF.ConditionServiceReference.MoldStateType State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public System.Nullable<int> Cuttedtimes {
            get {
                return this.CuttedtimesField;
            }
            set {
                if ((this.CuttedtimesField.Equals(value) != true)) {
                    this.CuttedtimesField = value;
                    this.RaisePropertyChanged("Cuttedtimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public System.Nullable<int> MaxCuttimes {
            get {
                return this.MaxCuttimesField;
            }
            set {
                if ((this.MaxCuttimesField.Equals(value) != true)) {
                    this.MaxCuttimesField = value;
                    this.RaisePropertyChanged("MaxCuttimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public System.Nullable<int> CurrentCuttimes {
            get {
                return this.CurrentCuttimesField;
            }
            set {
                if ((this.CurrentCuttimesField.Equals(value) != true)) {
                    this.CurrentCuttimesField = value;
                    this.RaisePropertyChanged("CurrentCuttimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public System.Nullable<int> MaxLendHour {
            get {
                return this.MaxLendHourField;
            }
            set {
                if ((this.MaxLendHourField.Equals(value) != true)) {
                    this.MaxLendHourField = value;
                    this.RaisePropertyChanged("MaxLendHour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public System.Nullable<int> ReleaseCycle {
            get {
                return this.ReleaseCycleField;
            }
            set {
                if ((this.ReleaseCycleField.Equals(value) != true)) {
                    this.ReleaseCycleField = value;
                    this.RaisePropertyChanged("ReleaseCycle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public System.Nullable<System.DateTime> LastReleasedDate {
            get {
                return this.LastReleasedDateField;
            }
            set {
                if ((this.LastReleasedDateField.Equals(value) != true)) {
                    this.LastReleasedDateField = value;
                    this.RaisePropertyChanged("LastReleasedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public System.Nullable<int> MaintainCycle {
            get {
                return this.MaintainCycleField;
            }
            set {
                if ((this.MaintainCycleField.Equals(value) != true)) {
                    this.MaintainCycleField = value;
                    this.RaisePropertyChanged("MaintainCycle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public System.Nullable<System.DateTime> LastMainedDate {
            get {
                return this.LastMainedDateField;
            }
            set {
                if ((this.LastMainedDateField.Equals(value) != true)) {
                    this.LastMainedDateField = value;
                    this.RaisePropertyChanged("LastMainedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public string Producer {
            get {
                return this.ProducerField;
            }
            set {
                if ((object.ReferenceEquals(this.ProducerField, value) != true)) {
                    this.ProducerField = value;
                    this.RaisePropertyChanged("Producer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=14)]
        public System.Nullable<decimal> Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=15)]
        public string Material {
            get {
                return this.MaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialField, value) != true)) {
                    this.MaterialField = value;
                    this.RaisePropertyChanged("Material");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=16)]
        public System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.MoldLastRecord> MoldLastRecord {
            get {
                return this.MoldLastRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldLastRecordField, value) != true)) {
                    this.MoldLastRecordField = value;
                    this.RaisePropertyChanged("MoldLastRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=17)]
        public System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.Report> Report {
            get {
                return this.ReportField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportField, value) != true)) {
                    this.ReportField = value;
                    this.RaisePropertyChanged("Report");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=18)]
        public System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.UniqStorage> UniqStorage {
            get {
                return this.UniqStorageField;
            }
            set {
                if ((object.ReferenceEquals(this.UniqStorageField, value) != true)) {
                    this.UniqStorageField = value;
                    this.RaisePropertyChanged("UniqStorage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MoldStateType", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.ENUM")]
    public enum MoldStateType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NULL = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotReturned = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NeedMantain = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Broken = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MoldLastRecord", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.Data")]
    [System.SerializableAttribute()]
    public partial class MoldLastRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoldNRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid StorageRecordNRField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MoldNR {
            get {
                return this.MoldNRField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldNRField, value) != true)) {
                    this.MoldNRField = value;
                    this.RaisePropertyChanged("MoldNR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid StorageRecordNR {
            get {
                return this.StorageRecordNRField;
            }
            set {
                if ((this.StorageRecordNRField.Equals(value) != true)) {
                    this.StorageRecordNRField = value;
                    this.RaisePropertyChanged("StorageRecordNR");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Report", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.Data")]
    [System.SerializableAttribute()]
    public partial class Report : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ReportIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoldIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ToolingManWPF.ConditionServiceReference.ReportType ReportTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ReportId {
            get {
                return this.ReportIdField;
            }
            set {
                if ((this.ReportIdField.Equals(value) != true)) {
                    this.ReportIdField = value;
                    this.RaisePropertyChanged("ReportId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string MoldID {
            get {
                return this.MoldIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldIDField, value) != true)) {
                    this.MoldIDField = value;
                    this.RaisePropertyChanged("MoldID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string OperatorID {
            get {
                return this.OperatorIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorIDField, value) != true)) {
                    this.OperatorIDField = value;
                    this.RaisePropertyChanged("OperatorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public ToolingManWPF.ConditionServiceReference.ReportType ReportType {
            get {
                return this.ReportTypeField;
            }
            set {
                if ((this.ReportTypeField.Equals(value) != true)) {
                    this.ReportTypeField = value;
                    this.RaisePropertyChanged("ReportType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UniqStorage", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.Data")]
    [System.SerializableAttribute()]
    public partial class UniqStorage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UniqStorageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UniqNRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PositionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageNRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UniqStorageId {
            get {
                return this.UniqStorageIdField;
            }
            set {
                if ((this.UniqStorageIdField.Equals(value) != true)) {
                    this.UniqStorageIdField = value;
                    this.RaisePropertyChanged("UniqStorageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string UniqNR {
            get {
                return this.UniqNRField;
            }
            set {
                if ((object.ReferenceEquals(this.UniqNRField, value) != true)) {
                    this.UniqNRField = value;
                    this.RaisePropertyChanged("UniqNR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.Guid PositionId {
            get {
                return this.PositionIdField;
            }
            set {
                if ((this.PositionIdField.Equals(value) != true)) {
                    this.PositionIdField = value;
                    this.RaisePropertyChanged("PositionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string PackageNR {
            get {
                return this.PackageNRField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageNRField, value) != true)) {
                    this.PackageNRField = value;
                    this.RaisePropertyChanged("PackageNR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReportType", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.ENUM")]
    public enum ReportType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MaintainReport = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TestReport = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MoldCategory", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.Data")]
    [System.SerializableAttribute()]
    public partial class MoldCategory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoldCateIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.MoldType> MoldTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MoldCateID {
            get {
                return this.MoldCateIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldCateIDField, value) != true)) {
                    this.MoldCateIDField = value;
                    this.RaisePropertyChanged("MoldCateID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.MoldType> MoldType {
            get {
                return this.MoldTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldTypeField, value) != true)) {
                    this.MoldTypeField = value;
                    this.RaisePropertyChanged("MoldType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Project", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.Data")]
    [System.SerializableAttribute()]
    public partial class Project : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.Mold> MoldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectID {
            get {
                return this.ProjectIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectIDField, value) != true)) {
                    this.ProjectIDField = value;
                    this.RaisePropertyChanged("ProjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.Mold> Mold {
            get {
                return this.MoldField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldField, value) != true)) {
                    this.MoldField = value;
                    this.RaisePropertyChanged("Mold");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EnumItem", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.Utilities")]
    [System.SerializableAttribute()]
    public partial class EnumItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WarehouseType", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.ENUM")]
    public enum WarehouseType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UniqWarehouse = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartWarehouse = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Warehouse", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.Data")]
    [System.SerializableAttribute()]
    public partial class Warehouse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WarehouseNRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ToolingManWPF.ConditionServiceReference.WarehouseType WarehouseTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.Position> PositionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WarehouseNR {
            get {
                return this.WarehouseNRField;
            }
            set {
                if ((object.ReferenceEquals(this.WarehouseNRField, value) != true)) {
                    this.WarehouseNRField = value;
                    this.RaisePropertyChanged("WarehouseNR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public ToolingManWPF.ConditionServiceReference.WarehouseType WarehouseType {
            get {
                return this.WarehouseTypeField;
            }
            set {
                if ((this.WarehouseTypeField.Equals(value) != true)) {
                    this.WarehouseTypeField = value;
                    this.RaisePropertyChanged("WarehouseType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.Position> Position {
            get {
                return this.PositionField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionField, value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Position", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.Data")]
    [System.SerializableAttribute()]
    public partial class Position : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PositionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WarehouseNRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PositionNRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CapicityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.UniqStorage> UniqStorageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PositionID {
            get {
                return this.PositionIDField;
            }
            set {
                if ((this.PositionIDField.Equals(value) != true)) {
                    this.PositionIDField = value;
                    this.RaisePropertyChanged("PositionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WarehouseNR {
            get {
                return this.WarehouseNRField;
            }
            set {
                if ((object.ReferenceEquals(this.WarehouseNRField, value) != true)) {
                    this.WarehouseNRField = value;
                    this.RaisePropertyChanged("WarehouseNR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string PositionNR {
            get {
                return this.PositionNRField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionNRField, value) != true)) {
                    this.PositionNRField = value;
                    this.RaisePropertyChanged("PositionNR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public int Capicity {
            get {
                return this.CapicityField;
            }
            set {
                if ((this.CapicityField.Equals(value) != true)) {
                    this.CapicityField = value;
                    this.RaisePropertyChanged("Capicity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.UniqStorage> UniqStorage {
            get {
                return this.UniqStorageField;
            }
            set {
                if ((object.ReferenceEquals(this.UniqStorageField, value) != true)) {
                    this.UniqStorageField = value;
                    this.RaisePropertyChanged("UniqStorage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConditionServiceReference.IConditionService")]
    public interface IConditionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConditionService/GetMoldTypes", ReplyAction="http://tempuri.org/IConditionService/GetMoldTypesResponse")]
        System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.MoldType> GetMoldTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConditionService/GetMoldCates", ReplyAction="http://tempuri.org/IConditionService/GetMoldCatesResponse")]
        System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.MoldCategory> GetMoldCates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConditionService/GetProjects", ReplyAction="http://tempuri.org/IConditionService/GetProjectsResponse")]
        System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.Project> GetProjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConditionService/GetEnumItems", ReplyAction="http://tempuri.org/IConditionService/GetEnumItemsResponse")]
        System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.EnumItem> GetEnumItems(string enumType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConditionService/GetWarehousesByType", ReplyAction="http://tempuri.org/IConditionService/GetWarehousesByTypeResponse")]
        System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.Warehouse> GetWarehousesByType(ToolingManWPF.ConditionServiceReference.WarehouseType warehouseType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConditionService/MoldExist", ReplyAction="http://tempuri.org/IConditionService/MoldExistResponse")]
        bool MoldExist(string moldNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConditionService/EmpExist", ReplyAction="http://tempuri.org/IConditionService/EmpExistResponse")]
        bool EmpExist(string emoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConditionService/WorkstationExist", ReplyAction="http://tempuri.org/IConditionService/WorkstationExistResponse")]
        bool WorkstationExist(string stationNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConditionService/PositionExist", ReplyAction="http://tempuri.org/IConditionService/PositionExistResponse")]
        bool PositionExist(string posiNr);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConditionServiceChannel : ToolingManWPF.ConditionServiceReference.IConditionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConditionServiceClient : System.ServiceModel.ClientBase<ToolingManWPF.ConditionServiceReference.IConditionService>, ToolingManWPF.ConditionServiceReference.IConditionService {
        
        public ConditionServiceClient() {
        }
        
        public ConditionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConditionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConditionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConditionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.MoldType> GetMoldTypes() {
            return base.Channel.GetMoldTypes();
        }
        
        public System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.MoldCategory> GetMoldCates() {
            return base.Channel.GetMoldCates();
        }
        
        public System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.Project> GetProjects() {
            return base.Channel.GetProjects();
        }
        
        public System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.EnumItem> GetEnumItems(string enumType) {
            return base.Channel.GetEnumItems(enumType);
        }
        
        public System.Collections.Generic.List<ToolingManWPF.ConditionServiceReference.Warehouse> GetWarehousesByType(ToolingManWPF.ConditionServiceReference.WarehouseType warehouseType) {
            return base.Channel.GetWarehousesByType(warehouseType);
        }
        
        public bool MoldExist(string moldNR) {
            return base.Channel.MoldExist(moldNR);
        }
        
        public bool EmpExist(string emoId) {
            return base.Channel.EmpExist(emoId);
        }
        
        public bool WorkstationExist(string stationNR) {
            return base.Channel.WorkstationExist(stationNR);
        }
        
        public bool PositionExist(string posiNr) {
            return base.Channel.PositionExist(posiNr);
        }
    }
}
